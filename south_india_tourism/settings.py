# """
# Django settings for south_india_tourism project.

# Generated by 'django-admin startproject' using Django 5.2.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path
# import os
# import dj_database_url
# from dotenv import load_dotenv
# import logging

# # Load environment variables from .env file
# load_dotenv()

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

# # Configure logger
# logger = logging.getLogger(__name__)

# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# # We will get the SECRET_KEY from an environment variable in Render.
# SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure--z)%y%1cy3&24xjuh6bbr(mg*h4m-%8g%95ad@-1^1ttsl(ufr')

# # SECURITY WARNING: don't run with debug turned on in production!
# # Set DEBUG to False in production. 'False' is not the same as False.
# DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# # ALLOWED_HOSTS for Render
# # Render provides a URL like 'your-app.onrender.com'.
# ALLOWED_HOSTS = []
# RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
# if RENDER_EXTERNAL_HOSTNAME:
#     ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# # It's also good to allow your custom domain if you add one later
# # and localhost for local development.
# ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])

# # Application definition

# INSTALLED_APPS = [
#     'core',
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
# ]

# # Middleware Configuration (for WhiteNoise)
# # Make sure WhiteNoise middleware is right after SecurityMiddleware
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this line
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     'core.middleware.NoCacheMiddleware',  # Custom middleware for cache control
# ]

# ROOT_URLCONF = 'south_india_tourism.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'south_india_tourism.wsgi.application'

# # Database Configuration using dj-database-url
# # This will use your local sqlite for dev and Render's Postgres for prod
# DATABASES = {
#     'default': dj_database_url.config(
#         # Replace this with your local database configuration
#         default='sqlite:///db.sqlite3',
#         conn_max_age=600,
#         ssl_require=True
#     )
# } 

# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True

# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where collectstatic will place files

# # Add this for WhiteNoise to find your static files
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# # Static files directories for development
# if DEBUG:
#     STATICFILES_DIRS = [
#         BASE_DIR / "core/static",
#     ]

# # Media files
# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / "media"

# # Add these settings
# LOGIN_REDIRECT_URL = '/'  # Redirect to home page after login
# LOGOUT_REDIRECT_URL = '/'  # Redirect to home page after logout (already handled, but good to set explicitly)

# # Session Configuration
# SESSION_COOKIE_AGE = 3600  # 1 hour
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_SAVE_EVERY_REQUEST = True
# SESSION_COOKIE_SECURE = not DEBUG  # Set to True in production with HTTPS
# SESSION_COOKIE_HTTPONLY = True
# SESSION_COOKIE_SAMESITE = 'Lax'

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # AUTH_USER_MODEL = 'core.CustomUser'

# # Add CSRF_TRUSTED_ORIGINS for Render
# CSRF_TRUSTED_ORIGINS = [f"https://{RENDER_EXTERNAL_HOSTNAME}"] if RENDER_EXTERNAL_HOSTNAME else []

# # API Configuration
# COMPOSIO_API_KEY = os.getenv('COMPOSIO_API_KEY')
# if not COMPOSIO_API_KEY:
#     logger.warning("COMPOSIO_API_KEY not found in environment variables. Some features may not work.")

# GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')
# if not GOOGLE_MAPS_API_KEY:
#     logger.warning("GOOGLE_MAPS_API_KEY not found in environment variables. Maps features will not work.")

# GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
# if not GEMINI_API_KEY:
#     logger.warning("GEMINI_API_KEY not found in environment variables. Gemini recommendations will not work.")

# OPENWEATHERMAP_API_KEY = os.getenv('OPENWEATHERMAP_API_KEY')
# if not OPENWEATHERMAP_API_KEY:
#     logger.warning("OPENWEATHERMAP_API_KEY not found in environment variables. Weather features will not work.")

# south_india_tourism/settings.py

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file for local development
load_dotenv()

# Configure logger
logger = logging.getLogger(__name__)

# --- SECURITY SETTINGS ---
# Get the secret key from an environment variable.
SECRET_KEY = os.environ.get('SECRET_KEY')

# Get the DEBUG status from an environment variable. Default to False for production.
# The .lower() == 'true' handles string 'True' vs boolean True.
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# --- HOSTS SETTINGS ---
# This setting is now dynamic and secure for Render.
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Also allow localhost for local development if DEBUG is True
if DEBUG:
    ALLOWED_HOSTS.append('127.0.0.1')
    ALLOWED_HOSTS.append('localhost')

# --- APPLICATION DEFINITION ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # For serving static files in development with WhiteNoise
    'django.contrib.staticfiles',
    'core',
]

# --- MIDDLEWARE ---
# WhiteNoise middleware is added for efficient static file serving in production.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # This must be right after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.NoCacheMiddleware',  # Custom middleware for cache control
    'core.middleware.LoginRequiredMiddleware',  # Custom middleware for login requirements
]

ROOT_URLCONF = 'south_india_tourism.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'south_india_tourism.wsgi.application'

# --- DATABASE CONFIGURATION ---
# This is the most important change. It uses the Render DATABASE_URL in production,
# but falls back to your local PostgreSQL setup for development.
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }
else:
    # Your local PostgreSQL settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'south_india_tourism',
            'USER': 'southindiauser',
            'PASSWORD': '1234', # Make sure this is your real local password
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# --- PASSWORD VALIDATION ---
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# --- INTERNATIONALIZATION ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# --- STATIC FILES (CSS, JavaScript, Images) ---
STATIC_URL = 'static/'

# This is where Django will look for your static files during development.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# This is where `collectstatic` will put all the files for production.
STATIC_ROOT = BASE_DIR / "staticfiles"

# This storage engine handles compression and caching for you in production.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- MEDIA FILES ---
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# --- DEFAULT PRIMARY KEY FIELD TYPE ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- CSRF SETTINGS FOR RENDER ---
# Important for security on POST requests (like login forms).
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS = [f'https://{RENDER_EXTERNAL_HOSTNAME}']

# --- SESSION CONFIGURATION ---
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_SECURE = not DEBUG  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# --- LOGIN/LOGOUT REDIRECTS ---
LOGIN_REDIRECT_URL = '/'  # Redirect to home page after login
LOGOUT_REDIRECT_URL = '/'  # Redirect to home page after logout

# --- API CONFIGURATION ---
COMPOSIO_API_KEY = os.getenv('COMPOSIO_API_KEY')
if not COMPOSIO_API_KEY:
    logger.warning("COMPOSIO_API_KEY not found in environment variables. Some features may not work.")

GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')
if not GOOGLE_MAPS_API_KEY:
    logger.warning("GOOGLE_MAPS_API_KEY not found in environment variables. Maps features will not work.")

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    logger.warning("GEMINI_API_KEY not found in environment variables. Gemini recommendations will not work.")

OPENWEATHERMAP_API_KEY = os.getenv('OPENWEATHERMAP_API_KEY')
if not OPENWEATHERMAP_API_KEY:
    logger.warning("OPENWEATHERMAP_API_KEY not found in environment variables. Weather features will not work.")

# --- SECURITY HEADERS FOR PRODUCTION ---
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    X_FRAME_OPTIONS = 'DENY'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'